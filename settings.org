* pre-setup
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Add MELPA (and possibly others)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (setq ns-right-alternate-modifier nil)

  (add-hook 'prog-mode-hook #'hs-minor-mode)

  (defun hs-python-custom-setup ()
    (setq hs-block-start-regexp "# start"
        hs-block-end-regexp "# end")
    (hs-minor-mode 1))

  (add-hook 'python-mode-hook 'hs-python-custom-setup)


#+end_src

* global

#+BEGIN_src emacs-lisp
(defun stop-yobaniy-repl ()
  "Send an interrupt signal to python process"
  (interactive)
  (let ((proc (ignore-errors
                (python-shell-get-process-or-error))))
    (when proc
      (interrupt-process proc))))
(with-eval-after-load 'python
  (define-key python-mode-map (kbd "C-c d")
    #'stop-yobaniy-repl))

#+END_src


Better completion for M-x
#+BEGIN_src emacs-lisp
(use-package vertico :ensure t :demand t
  :init
  (vertico-mode))
#+end_src

** Terminal
Very good terminal emulator can works with linux programs
#+begin_src emacs-lisp
  (use-package eat
    :ensure t
    :hook ((eshell-load . eat-eshell-mode)
           (eshell-mode . eat-eshell-mode)))
#+end_src

** 
#+BEGIN_src emacs-lisp
(use-package orderless :ensure t :demand t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

#+BEGIN_src emacs-lisp
;; Useful annotations for vertico
(use-package marginalia :ensure t :demand t
  :init
  (marginalia-mode))
#+end_src

#+BEGIN_src emacs-lisp
(use-package emacs :ensure nil
  :bind (("M-o" . other-window)
         ("M-l" . downcase-dwim)
         ("M-u" . upcase-dwim)
         ("M-c" . capitalize-dwim)
         ("C-h '" . describe-char))
  :init
  ;; Configure backups. Put all of them in the separate directory.
  ;; Copied from the emacs wiki.
  (setq backup-by-copying t     ; don't clobber symlinks
        backup-directory-alist '(("." . "~/.saves/")) ; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)      ; use versioned backups
  ;; Disable audio bell on error
  (setq ring-bell-function 'ignore)

  ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
  ;; mode.  Vertico commands are hidden in normal buffers. This setting is
  ;; useful beyond Vertico.
  (setq read-extended-command-predicate #'command-completion-default-include-p)
  
  ;; Support opening new minibuffers from inside existing minibuffers.
  (setq enable-recursive-minibuffers t)

  ;; Spaces > tabs.
  ;; Use 4 spaces for tabs whenever possible.
  ;; Remember that there's `untabify' command which helps you convert tabs to spaces.
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)

  ;; Delete selection on typing
  (delete-selection-mode)

  ;; Enable clipboard synchronization on wayland.
  
  (when (= 0 (shell-command "wl-copy -v"))
    ;; credit: yorickvP on Github
    (setq wl-copy-process nil)
    (defun wl-copy (text)
      (setq wl-copy-process (make-process :name "wl-copy"
                                          :buffer nil
                                          :command '("wl-copy" "-f" "-n")
                                          :connection-type 'pipe
                                          :noquery t))
      (process-send-string wl-copy-process text)
      (process-send-eof wl-copy-process))
    (defun wl-paste ()
      (if (and wl-copy-process (process-live-p wl-copy-process))
          nil     ; should return nil if we're the current paste owner
        (shell-command-to-string "wl-paste -n | tr -d \r")))
    (setq interprogram-cut-function 'wl-copy)
    (setq interprogram-paste-function 'wl-paste))
  ;; Don't show the splash screen
  (setq inhibit-startup-message t)

  ;; Turn off some unneeded UI elements
  (menu-bar-mode -1)  ; Leave this one on if you're a beginner!
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Allow short answers
  (setopt use-short-answers t)

  ;; Ask confirmation on emacs exit
  (setq confirm-kill-emacs #'y-or-n-p))
#+end_src

#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult :ensure t :demand t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ("C-h t" . consult-theme)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer) ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab) ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)         ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer) ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop) ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake) ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)   ;; orig. goto-line
         ("M-g M-g" . consult-goto-line) ;; orig. goto-line
         ("M-g o" . consult-outline) ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find) ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history) ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history) ;; orig. isearch-edit-string
         ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi) ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history) ;; orig. next-matching-history-element
         ("M-r" . consult-history)) ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))
#+end_src

#+begin_src emacs-lisp
(use-package embark :ensure t :demand t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult :ensure t :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

#+begin_src emacs-lisp
;; Persist history over Emacs restarts. Vertico sorts by history position.
;;(use-package savehist
;;  :init
;;  (savehist-mode))
(savehist-mode 1) ;; Enable savehist
(setq savehist-file (expand-file-name "savehist" user-emacs-directory)
      history-length 1000
      savehist-save-minibuffer-history t
      savehist-additional-variables '(search-ring regexp-search-ring))
#+end_src

#+BEGIN_SRC emacs-lisp
;; Show more useful information in eldoc
(use-package helpful :ensure t :demand t
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)
         ("C-h x" . helpful-command)))
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package tree-sitter :ensure t :demand t)
(use-package tree-sitter-langs :ensure t :demand t :after tree-sitter
  :init
  (global-tree-sitter-mode)
  ;; Awesome fast syntax highlighting!
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

#+end_src

#+BEGIN_SRC emacs-lisp
;; Snippets!
(use-package tempel
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))
  :init
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf))
(use-package tempel-collection :ensure t)
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters :ensure t :demand t
  :hook prog-mode)
#+end_src

#+BEGIN_SRC emacs-lisp
;; Newer version of transient package required for magit.
(use-package transient :ensure t)
(use-package magit :ensure t :demand t)
#+end_src
** avy
#+BEGIN_src emacs-lisp

(use-package avy :ensure t :demand t
  :bind ("M-j" . avy-goto-char-timer)
  :config
  (setq avy-all-windows t
        avy-all-windows-alt nil
        avy-background t
        avy-single-candidate-jump nil))
#+end_src
** hl-todo
#+BEGIN_src emacs-lisp
(use-package hl-todo :ensure t :demand t
  :init
  (global-hl-todo-mode))
#+end_src
** languagetool
#+BEGIN_src emacs-lisp
    ;; language tool

    (require 'langtool) 
    (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*")


    (use-package languagetool
      :ensure t
      :defer t
      :commands (languagetool-check
                 languagetool-clear-suggestions
                 languagetool-correct-at-point
                 languagetool-correct-buffer
                 languagetool-set-language
                 languagetool-server-mode
                 languagetool-server-start
                 languagetool-server-stop)
      :config
      (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8")
            langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*")
            ;languagetool-console-command "/usr/share/java/languagetool/languagetool-commandline.jar"
            ;languagetool-server-command "/usr/share/java/languagetool/languagetool-server.jar")
      (global-set-key (kbd "C-:") 'languagetool-correct-at-point)
      )
#+end_src
* Styles
** themes
#+BEGIN_src emacs-lisp
;; Lovely themes
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (nerd-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+end_src
** 
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
(electric-indent-mode -1)
(defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(85 . 50) '(100 . 100)))))
 (global-set-key (kbd "C-c $") 'toggle-transparency)

(set-frame-parameter (selected-frame) 'alpha '(100 . 100))
(add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+END_SRC

#+BEGIN_src emacs-lisp
;; org mode
;;(use-package org
;;  :ensure t
;;  :demand t
;;  :config
;;  (add-hook 'org-mode-hook #'org-indent-mode))
;;(use-package org-modern :ensure t :demand t)
;;(add-hook 'org-mode-hook #'org-modern-mode)
#+end_src

#+BEGIN_SRC emacs-lisp

(modify-all-frames-parameters
 '((right-divider-width . 30)
   (internal-border-width . 30)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background))



;(with-eval-after-load 'org (global-org-modern-mode))
(use-package org-download
  :ensure t
  :demand t
  :after org
  :defer nil
  :custom
  (org-image-actual-width 800)
  :bind
  ("C-M-y" . org-download-clipboard)
  :config
    (require 'org-download))
(setq-default org-download-image-dir "/home/alex/Notes/pngs/")

(setq org-image-actual-width (list 1050))
#+End_src
* Org
** insert src
#+begin_src emacs-lisp
  ;; Define function to insert a src block
  (defun org-insert-src-block ()
    "Insert an Org-mode src block at cursor."
    (interactive)
    (insert "#+begin_src\n\n#+end_src")
    (forward-line -1))  ; Move cursor to the empty line between begin/end

  ;; Bind to a key (e.g., C-c s) in Org mode
  (use-package org
    :bind (:map org-mode-map
           ("C-c s" . org-insert-src-block)))

  (use-package org-fragtog
    :ensure t)
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (setq org-startup-with-latex-preview t)

(setq org-latex-preview-numbered t)


(setq org-format-latex-options 
      (plist-put org-format-latex-options :scale 1.5))

#+end_src
* Pyhton
** REPL
#+begin_src emacs-lisp
  ;; 1) Определяем функцию для отправки кода между маркерами
(defun python-shell-send-block-by-markers (start-marker end-marker)
  "Отправить в Python-контейнер код между строками START-MARKER и END-MARKER."
  (interactive
   ;; по умолчанию ищем маркеры "# start" и "# end"
   (list (read-string "Start marker (regex): " "# start")
         (read-string "End marker (regex): "   "# end")))
  (let (beg end)
    (save-excursion
      ;; ищем вверх от курсора START-MARKER
      (unless (search-backward-regexp start-marker nil t)
        (error "Не найден маркер START (%s)" start-marker))
      (forward-line 1)            ; переходим на строку после маркера
      (setq beg (point))
      ;; ищем вниз от beg END-MARKER
      (unless (search-forward-regexp end-marker nil t)
        (error "Не найден маркер END (%s)" end-marker))
      (beginning-of-line)         ; конец блока — перед строкой с END
      (setq end (point)))
    ;; наконец, шлём регион
    (python-shell-send-region beg end)
    (message "Sent region %d…%d to Python" beg end)))

;; 2) Закидываем функцию в python-mode и вешаем на удобную комбинацию
(with-eval-after-load 'python
  (define-key python-mode-map (kbd "C-c C-b")
    #'python-shell-send-block-by-markers))
#+end_src
** lsp 
We use the excellent lsp-mode to enable IDE-like functionality for
many different programming languages via “language servers” that speak
the Language Server Protocol. Before trying to set up lsp-mode for a
particular language, check out the documentation for your language so
that you can learn which language servers are available and how to
install them.

The lsp-keymap-prefix setting enables you to define a prefix for where
lsp-mode’s default keybindings will be added. I highly recommend using
the prefix to find out what you can do with lsp-mode in a buffer.

The which-key integration adds helpful descriptions of the various
keys so you should be able to learn a lot just by pressing C-c l in a
lsp-mode buffer and trying different things that you find there.

#+begin_src emacs-lisp
   (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
   (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           ((python-mode
             c-mode
             web-mode
             
             ) . lsp-deferred)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

   ; (use-package lsp-pyright
    ;:hook (python-mode . (lambda () (require 'lsp-pyright)))
    ;:init (when (executable-find "python3")
    ;        (setq lsp-pyright-python-executable-cmd "python3")))




    (use-package lsp-ui
      :commands lsp-ui-mode
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-enable t)
      (lsp-ui-doc-show-with-cursor t))
#+end_src

#+RESULTS:

*** Projectile

#+begin_src emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src


*** Complitation
#+begin_src emacs-lisp
  ;(use-package company-lsp
  ;  :after company
  ;  :hook (lsp-mode . company-lsp-enable)
  ;  :bind (:map lsp-mode-map
  ;     ("<tab>" . company-indent-or-complete-common)))
#+end_src

*** ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package treemacs  :ensure t)       
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)


  ;; optional if you want which-key integration
  (use-package which-key
      :config
      (which-key-mode))
#+end_src

*** snippets
git clone https://github.com/AndreaCrotti/yasnippet-snippets ~/.emacs.d/snippets/
#+begin_src emacs-lisp
  (use-package yasnippet
     :ensure t
     :config
     (yas-global-mode 1)
   ;; Optionally, set the snippet directory
     (setq yas-snippet-dirs '("~/.emacs.d/snippets/snippets/"))) 
#+end_src

*** python shell
#+begin_src emacs-lisp
  (require 'widget)

  (use-package pyvenv
    :ensure t
    :config
    ;(add-hook 'python-mode-hook 'pyvenv-activate)
    (pyvenv-mode 1))

#+end_src

** python
#+BEGIN_src emacs-lisp
  (use-package evil-nerd-commenter
            :bind ("M-;" . evilnc-comment-or-uncomment-lines))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (setq company-backends '(company-capf))
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :config
    (global-company-mode 1)  ;; Enable company-mode globally
    :bind (:map company-active-map
       ("<tab>" . company-complete-selection))
       (:map lsp-mode-map
       ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.1))
#+end_src


Very good formater for python
#+begin_src emacs-lisp
  (use-package blacken
  :ensure t
  :hook (python-mode . blacken-mode)
  :custom
  (blacken-line-length 120)) ;; Optional: set line length
  
#+end_src
